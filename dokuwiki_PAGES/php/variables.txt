====== Variablen ======

Eine Variable ermöglicht das Speichern eines Wertes an einer bestimmten Speicheradresse (FIXME [[|Speicheradresse]]). Für bequemes Arbeiten mit diesen Adressen verwenden Programmiersprachen oft die sogenannten Variablennamen.
\\
\\
Gültige Zeichen für Variablennamen sind alle Buchstaben aus dem Englischen Alphabet(Also keine Umlaute und kein ß), Ziffern und Unterstriche. Am Anfang steht ein Buchstabe oder Unterstrich, aber auf keinen Fall eine Ziffer. Selbst definierte Variablen solltest Du stets mit einem mit Buchstaben beginnen, denn  PHP stellt System-variablen zur Verfügung, die mit dem Unterstrich beginnen. Eine Ausnahme ist, wenn Du bestimmte Variablen in mehreren Skripts nutzen möchtest.
----
Kleine Information am Rande: PHP unterscheidet zwischen Groß- und Kleinschreibung.
----
\\
Wie aus der Bezeichnung hervorgeht, ist der Inhalt variabel und kann jederzeit neu berechnet werden.\\
===== Wertzuweisungen =====

Um Variablen zuzuweisen, schreibst Du ein $-Zeichen (Dollar), den Namen der Variable und den Operator = (Gleich). Hinter dem Operator steht der Wert der Variable.
\\
<code php>
<?php
   $variablename = "Inhalt";
   $ganzzahl = 10;
   $fließkommazahl = 10.5;

?>
</code>
Um der Variable einen nummerischen Wert zuzuweisen, setzt Du kein  Anführungszeichen, sonst wird der Wert als Zeichenkette (String) verarbeitet. PHP kann den [[glossary:datatype|Datentyp]] automatisch nach ihrem zugewiesenen Wert bestimmen.\\
\\
An Variablen kann auch indirekt ein Wert vergeben werden.
<code php>
<?php
    $a = 10;
    $b = $a;
    echo "Der Wert der Variable \$b ist der von \$a, also ".$b;
?>
</code>
== Ausgabe: ==
Der Wer der Variable $b ist der von $a, also 10.

===== Globale Variablen =====

Sobald Konstrukte wie FIXME [[|Schleifen]] oder FIXME [[|Funktionen]] auftauchen, beachtest Du bitte Folgendes:\\
  * Variablen, die Du außerhalb von Funktionen deklarierst, sind innerhalb dieser nicht bekannt,
  * Jede Variable, die Du innerhalb eines Funktionsblocks deklarierst, ist außerhalb unbekannt. Man sagt auch, der Gültigkeitsbereich (Scope) der Variable ist auf die Funktion beschränkt.
\\
<code php>
<?php
    $a = 10;
    function zeige()
    {
        echo $a;
    }
?>
</code>
Diese Funktion gibt nicht, wie erwatet, 10 aus. Der Bildschirm bleibt leer (oder es wird ein E_NOTICE Fehler ausgegeben), da die Variable $a nicht der Funktion bekannt gemacht wurde (Also nicht im Scope der der Variable liegt).\\
Mehr zu Funktionen findest du FIXME [[|Hier]].\\
\\
Um die Variable bekannt zu machen, musst du ''global'' verwenden. Damit kannst du Variablen und deren Werte strukturübergreifend  benutzt werden.
<code php>
<?php
    $a = 10;
    function zeige()
    {
        global $a;
        echo $a;
    }
?>
</code>
== Ausgabe: ==
''10''\\
\\
----
Noch ein kleiner Hinweis am Rande: Verwende das Komma, um mehrere Variablen als ''global'' zu definieren..
<code php>
<?php
  global $variable1, $variable2, $variable3;
?>
</code>
----
\\
Der Server wird diese Variablen in ein Assoziatives FIXME[[php:arrays|Array]] laden. Mit ''$GLOBALS['Variablenname']''  rufst du eine ''global'' deklarierte Variable auf.\\
<code php>
<?php
    global $a,$b,$c;
    $a = 10;
    $b = 10.5;
    $c = "PHP";
    function zeige()
    {
      echo " Der Wert der Variable \$a ist".$GLOBALS['a']." und der Wert von \$b ist ".
      $GLOBALS['b']." und von \$c ist der Wert '".$GLOBALS['c']."'.";
    }
?>
</code>
== Ausgabe: ==
''Der Wert der Variable $a ist 10 und der Wert von $b ist 10.5 und von $c ist der Wert 'PHP'.''\\
Mehr zu Arrays erfährst Du [[php:arrays|Hier]].\\
===== Statische Variablen =====
Normalerweise verlieren Variablen nach Verlassen eines Strukturblocks, zum Beispiel einer Funktion oder einer Schleife, Ihren in der Struktur neu berechneten Wert (Nach PHP 5.1 ist dies nicht mehr der Fall, wenn Schleifen benutzt wurden.). Ist das nicht erwünscht, kannst du die Variable mit ''static'' deklarieren.\\
<code php>
<?php
    function zeige()
    {
        $var1 = 10;
        $var2 = $var1 + $var1;
        echo "Der Wert der Variable ist: ".$var1."<br />";
    }
    zeige();
    zeige();
?>
</code>
== Ausgabe: ==
'' Der Wert der Variable ist 20'' \\
''Der Wert der Variable ist 20'' \\
<code php>
<?php
    function zeige()
    {
        static $var1 = 10; //Statische Deklaration
        $var1 = $var1 + $var1;
        echo "Der Wert der Variable ist: ".$var1."<br />";
    }
    zeige();
    zeige();
?>
</code>
== Ausgabe: ==
'' Der Wert der Variable ist 20'' \\
''Der Wert der Variable ist 40'' \\
Die statische deklarierte Variable behält ihren in der Struktur neu zugewiesenen Wert bei.\\
===== Dynamische Variablen =====

PHP bietet die Möglichkeit, eine Variable in einer anderen zu speichern. Im folgenden Beispiel wird zuerst der Variable $a  der Wert ''name'' zugewiesen. Im zweiten Schritt wird eine neue Variable dynamisch erzeugt, indem zwei $-Zeichen ($$) verwendet werden. Der neuen Variable wird der Wert ''Lernen'' zugewiesen. Der Variablenname der dynamisch erzeugten Variable hat den Wert der Variable $a angenommen. Das bedeutet, dass die dynamische Variable jetzt eigentlich $name heißt.
<code php>
<?php
     $a = "name";
     $$a = "Lernen";
     echo $name;
?>
</code>
== Ausgabe: ==
''Lernen''
\\
----
Diese Art der Deklaration von Variablen ist auch mit [[php:arrays|Arrays]] möglich.
----

===== Variablenfunktionen =====

Durch die Funktion ''isset()'' wird eine Variable auf ihre Existenz überprüft.
<code php>
<?php
    $test = "PHP";
    $existent = isset($test);
?>
</code>
Ist die Variable $test nicht deklariert, erhält $existent den Wert ''FALSE'', was falsch bedeutet. Anders in diesem Beispiel: Hier wurde $existent der Wert ''TRUE'' zugewiesen.
